package ${cfg.actionPackage};


import java.util.List;

import javax.annotation.Resource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.thd.action.PubAction;
import ${cfg.pojoPackage}.${cfg.tableCodeForClass};
import ${cfg.servicePackage}.${cfg.serviceName};
import com.thd.util.StringUtil;


/**
 * ${cfg.tableName}相关
 * file autogenerated by ThirdteenDevils's CodeGenUtil 
 */
public class ${cfg.actionName} extends PubAction {
	
	@Resource
	private ${cfg.serviceName} ${cfg.serviceNameForProperty};
	
	private ${cfg.tableCodeForClass}  ${cfg.tableCodeForProperty} = new ${cfg.tableCodeForClass}();
	
	
	/**
	 *  ${cfg.tableName}列表展示界面
	 *  url:/${cfg.nameSpace}/${cfg.urlActionName}!${cfg.tableCodeForProperty}List.do
	 */
	public String ${cfg.tableCodeForProperty}List(){
		try{
			this.logger.info("${cfg.tableCodeForProperty}List()");
			this.setForwardPage("/${cfg.jspPath}/${cfg.tableCodeForProperty}List.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * ajax获取${cfg.tableName}列表数据
	 * url:/${cfg.nameSpace}/${cfg.urlActionName}!${cfg.tableCodeForProperty}ListGetDate.do
	 */
	public String ${cfg.tableCodeForProperty}ListGetDate(){
		try{
			this.logger.info("${cfg.tableCodeForProperty}ListGetDate()");
			
			StringBuffer json = new StringBuffer();
			GsonBuilder builder = new GsonBuilder();
			//Gson gson = builder.setDateFormat("yyyy-MM-dd HH:mm:ss").create();
			Gson gson = builder.setDateFormat("yyyy-MM-dd").create();
			map.put("${cfg.pkColumn.columnCodeForUpper}", this.getReq().getParameter("${cfg.pkColumn.columnCodeForUpper}"));
			
			<#list cfg.columnList as col> 
			//${col.columnDesc}
			map.put("${col.columnCodeForUpper}", this.getReq().getParameter("${col.columnCodeForUpper}"));
			</#list>
			
			//排序
			map.put("sort",getReq().getParameter("sort"));	
			map.put("order",getReq().getParameter("order"));	
			
			List l = this.${cfg.serviceNameForProperty}.query${cfg.tableCodeForClass}(this.map, this.p);
			
			String listStr = gson.toJson(l);
			json.append("{\"total\":" + p.getListSize() + ",\"rows\":");
			if(l==null || l.size() < 1){
				listStr = "[]";
			}
			json.append(listStr);
			json.append("}");
			
			this.setMsg(json.toString());
			return "ajax";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}

	/**
	 * 保存或更新${cfg.tableName}提交操作
	 * url:/${cfg.nameSpace}/${cfg.urlActionName}!${cfg.tableCodeForProperty}FormSubmit.do
	 */
	public String ${cfg.tableCodeForProperty}FormSubmit(){
		try{
			this.logger.info("${cfg.tableCodeForProperty}EditSubmit()");
			if("save".equals(this.getOperate())){
				this.${cfg.serviceNameForProperty}.save${cfg.tableCodeForClass}(this.${cfg.tableCodeForProperty});
			}else{
				this.${cfg.serviceNameForProperty}.update${cfg.tableCodeForClass}(this.${cfg.tableCodeForProperty});
			}			
			this.setScriptContent("alert('操作成功');getParent().reload${cfg.tableCodeForClass}Dg();window.close()");
			return "msg";
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	/**
	 * 新增/编辑${cfg.tableName}界面
	 * url:/${cfg.nameSpace}/${cfg.urlActionName}!${cfg.tableCodeForProperty}Form.do
	 */
	public String ${cfg.tableCodeForProperty}Form(){
		try{
			this.logger.info("${cfg.tableCodeForProperty}Form()");
			if(this.${cfg.tableCodeForProperty}.get${cfg.pkColumn.columnCodeForClass}()!=null){
				${cfg.tableCodeForProperty} = this.${cfg.serviceNameForProperty}.query${cfg.tableCodeForClass}ById(${cfg.tableCodeForProperty}.get${cfg.pkColumn.columnCodeForClass}());				
				this.setOperate("update");
			}else{
				this.setOperate("save");
			}
			this.setForwardPage("/${cfg.jspPath}/${cfg.tableCodeForProperty}Form.jsp");
			return this.SUCCESS;
		}catch(Exception e){
			e.printStackTrace();
			return this.err(e);
		}
	}
	
	/**
	 * 删除单个${cfg.tableName}对象操作
	 * url:/${cfg.nameSpace}/${cfg.urlActionName}!delete${cfg.tableCodeForClass}ById.do?${cfg.tableCodeForProperty}.${cfg.pkColumn.columnCodeForProperty}=xxx
	 */
	public String delete${cfg.tableCodeForClass}ById(){
		try{
			this.logger.info("delete${cfg.tableCodeForClass}ById()");
			this.${cfg.serviceNameForProperty}.delete${cfg.tableCodeForClass}ById(${cfg.tableCodeForProperty}.get${cfg.pkColumn.columnCodeForClass}());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	/**
	 * 批量删除${cfg.tableName}对象操作
	 * url:/${cfg.nameSpace}/${cfg.urlActionName}!delete${cfg.tableCodeForClass}ByIds.do?$ids=xxx
	 */
	public String delete${cfg.tableCodeForClass}ByIds(){
		try{
			this.logger.info("delete${cfg.tableCodeForClass}ByIds()");
			this.${cfg.serviceNameForProperty}.delete${cfg.tableCodeForClass}ByIds(this.getIds());
			this.setMsg("success");
		}catch(Exception e){
			e.printStackTrace();
			this.setMsg(e.getMessage());
		}
		return "ajax";
	}
	
	public void set${cfg.tableCodeForClass}( ${cfg.tableCodeForClass} ${cfg.tableCodeForProperty}) {
		this.${cfg.tableCodeForProperty} = ${cfg.tableCodeForProperty};
	}
	public ${cfg.tableCodeForClass} get${cfg.tableCodeForClass}() {
		return ${cfg.tableCodeForProperty};
	}
	
}
